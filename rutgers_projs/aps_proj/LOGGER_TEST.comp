/*									tab{4
 *  LOGGER_TEST.comp
 *
 * "Copyright (c) 2000 and The Regents of the University 
 * of California.  All rights reserved.
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation for any purpose, without fee, and without written agreement is
 * hereby granted, provided that the above copyright notice and the following
 * two paragraphs appear in all copies of this software.
 * 
 * IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR
 * DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT
 * OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF THE UNIVERSITY OF
 * CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 * THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS
 * ON AN "AS IS" BASIS, AND THE UNIVERSITY OF CALIFORNIA HAS NO OBLIGATION TO
 * PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS."
 *
 * Authors:  Jason Hill
 * Date:     Jan., 2000
 *
 * This module is a demonstration of the logging functionality.  It 
 * periodically reads in sensor values.  Once it has a full data packet of
 * sensor readings, it writes the data out to a Log Entry.  The LOGGER
 * componnet automatically appends the entry to the log.  When the log
 * write is complete, the applications sends the same data to the UART.
 *
 * This component also acceps message commands that will cause it to read
 * from the log.  The first two bytes are interpreted a log entry number.  
 * The module reads the values out of the log and then sends them to the 
 * UART. 
 * 
 * The log entries are 30 bytes long.  They are stored in the I2C EEPROM
 * which has a capacity of 256 Kbits.
 *
 */

TOS_MODULE LOGGER_TEST

ACCEPTS{
	char LOGGER_TEST_INIT(void);
	char LOGGER_TEST_START(void);
};

HANDLES{
	void LOGGER_TEST_CLOCK_EVENT(void);
	char LOGGER_TEST_WRITE_LOG_DONE(char success);
	char LOGGER_TEST_READ_LOG_DONE(char* data, char success);
	char LOGGER_DATA_READY(int data);
	TOS_MsgPtr LOGGER_TEST_READ_MSG(TOS_MsgPtr data);
	char LOGGER_TEST_MSG_SENT(TOS_MsgPtr msg);
};
USES{
    	char LOGGER_TEST_SUB_INIT(void);
    	char LOGGER_TEST_WRITE_LOG(char* data);
    	char LOGGER_TEST_READ_LOG(int line, char* data);
    	char LOGGER_CLOCK_INIT(char data, char scale);
	char LOGGER_ADC_INIT(void);
	char LOGGER_ADC_GET_DATA(char port);
	char COMM_INIT(void);
	char COMM_POWER(char mode);
	char COMM_SEND_MSG(char addr, char type, TOS_MsgPtr data);


	char YELLOW_LED_TOGGLE(void);
	char RED_LED_TOGGLE(void);
	char GREEN_LED_TOGGLE(void);

};

