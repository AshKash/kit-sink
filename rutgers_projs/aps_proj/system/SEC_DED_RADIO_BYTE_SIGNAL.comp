/*									tab:4
 *
 *
 * "Copyright (c) 2000 and The Regents of the University 
 * of California.  All rights reserved.
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation for any purpose, without fee, and without written agreement is
 * hereby granted, provided that the above copyright notice and the following
 * two paragraphs appear in all copies of this software.
 * 
 * IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR
 * DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT
 * OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF THE UNIVERSITY OF
 * CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 * THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS
 * ON AN "AS IS" BASIS, AND THE UNIVERSITY OF CALIFORNIA HAS NO OBLIGATION TO
 * PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS."
 *
 * Authors:		Jason Hill
 *
 *
 *
 * This is a version of the SEC_DED radio byte that also sample the BBOUT pin
 * and send the readings up with the byte arrival event. This can be combined
 * with the signal strenght packet component to provide the signal strength
 * of the message.
 *
 *
 */


TOS_MODULE SEC_DED_RADIO_BYTE_SIGNAL;


ACCEPTS{
	char RADIO_BYTE_INIT(void);
	char RADIO_BYTE_TX_BYTES(char data);
	char RADIO_BYTE_PWR(char mode);
};
SIGNALS{
	char RADIO_BYTE_RX_BYTE_READY(char data, char error, int strength);
	char RADIO_BYTE_TX_BYTE_READY(char success);
	char RADIO_BYTE_TX_DONE(void);
};
HANDLES{
	char RADIO_BYTE_TX_BIT_EVENT(void);
	char RADIO_BYTE_RX_BIT_EVENT(char data);
	char SIGNAL_DATA_READY(int data);

};
USES{
	char RADIO_SUB_INIT(void);
	char RADIO_SUB_TX_MODE(void);
	char RADIO_SUB_TX_BIT(char data);
	char RADIO_SUB_RX_MODE(void);
	char RADIO_SUB_PWR(char mode);
	char RADIO_SUB_SET_BIT_RATE(char level);

	char SIGNAL_ADC_INIT(void);
        char SIGNAL_ADC_GET_DATA(char port);

};
INTERNAL{
	char decodeNibbles(char first, char second);
	char encodeNibble(char in);
	char decodeData(void);
	void encodeData(void);
};
